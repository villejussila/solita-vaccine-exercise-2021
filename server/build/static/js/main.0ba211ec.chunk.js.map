{"version":3,"sources":["queries.ts","components/DateAndTimePicker.tsx","reducer.ts","utils.ts","components/SearchResultList.tsx","App.tsx","index.tsx","constants.ts"],"names":["VACCINE_ORDER_ARRIVED_BY_DATE","gql","MaterialUIPickers","selectedDate","handleDateChange","handleClick","handleCheckedChange","checked","utils","DateFnsUtils","Grid","container","justifyContent","alignItems","disableToolbar","variant","format","margin","id","label","value","onChange","KeyboardButtonProps","ampm","views","disabled","Button","color","style","height","marginLeft","onClick","Checkbox","Typography","ActionType","convertLocalTime","date","inSeconds","Date","parse","tzoffset","getTimezoneOffset","time","today","isDaylightSavingTime","sub","hours","toISOString","add","removeTimeFromDate","split","jan","getFullYear","jul","Math","max","stdTimezoneOffset","isDstObserved","initialState","ordersArrived","vaccinesArrived","vaccinationsUsed","producer","SolarBuddhica","orders","vaccines","Antiqua","Zerpfy","bottlesExpiredOnDay","expiredVaccinesBeforeUsage","vaccinesLeftNotExpired","vaccinesExpiringNextTenDays","interestingDataReducer","state","action","type","INCREMENT","payload","order","injections","vaccinationsDoneWithVaccine","length","isBottleExpiredOnDate","isBottleExpiredOnGivenDate","isExpiringInTenDays","currentProducer","INIT","Error","JSON","stringify","SearchResultList","dataArrivedByDate","convertedDate","loadingOrders","initialLoading","useReducer","dispatch","parseData","data","dayStartMS","startOfDay","vaccineOrdersArrivedByDate","forEach","givenDayMS","bottleExpiresMS","bottleExpires","expirationDate","differenceInDaysExcludingDST","floor","differenceInHours","isExpiredInTenDays","stringifyCurrentProducerName","vaccine","useEffect","emptyCachedData","toString","Box","display","marginTop","CircularProgress","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","App","React","useState","setSelectedDate","setConvertedDate","isTimeIncludedChecked","setIsTimeIncludedChecked","hasSearched","setHasSearched","useQuery","variables","loading","initialVaccineOrderData","useLazyQuery","getVaccineOrdersArrivedBy","Container","AppBar","position","Toolbar","align","newDate","dateWithoutTimeZone","dateWithoutTime","event","target","initialData","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.0ba211ec.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const ALL_VACCINE_ORDERS = gql`\n  query {\n    allVaccineOrders {\n      vaccine\n      arrived\n      injections\n    }\n  }\n`;\nexport const VACCINE_ORDER_ARRIVED_BY_DATE = gql`\n  query vaccineOrdersArrivedByDate($date: String!) {\n    vaccineOrdersArrivedByDate(date: $date) {\n      vaccine\n      arrived\n      bottleExpires\n      isBottleExpiredOnDate(date: $date)\n      injections\n      vaccinationsDoneWithVaccine {\n        vaccinationDate\n      }\n    }\n  }\n`;\nexport const VACCINE_ORDER_ARRIVED_ON_DATE = gql`\n  query vaccineOrdersArrivedOnDate($date: String!) {\n    vaccineOrdersArrivedOnDate(date: $date) {\n      vaccine\n      arrived\n      bottleExpires\n      isBottleExpiredOnDate(date: $date)\n      injections\n      vaccinationsDoneWithVaccine {\n        vaccinationDate\n      }\n    }\n  }\n`;\n","import 'date-fns';\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\nimport { Button, Checkbox, Typography } from '@material-ui/core';\n\ninterface Props {\n  selectedDate: Date | null;\n  handleDateChange: (\n    date: MaterialUiPickersDate,\n    value?: string | null | undefined\n  ) => void;\n  handleClick?: () => void;\n  handleCheckedChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  checked: boolean;\n}\n\nexport default function MaterialUIPickers({\n  selectedDate,\n  handleDateChange,\n  handleClick,\n  handleCheckedChange,\n  checked,\n}: Props) {\n  return (\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <Grid container justifyContent=\"center\" alignItems=\"center\">\n        <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"MM/dd/yyyy\"\n          margin=\"normal\"\n          id=\"date-picker-inline\"\n          label=\"Date\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n        <KeyboardTimePicker\n          margin=\"normal\"\n          ampm={false}\n          id=\"time-picker\"\n          format=\"HH:mm:ss\"\n          label=\"Time\"\n          views={['hours', 'minutes', 'seconds']}\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change time',\n          }}\n          disabled={!checked}\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          style={{ height: 48, marginLeft: 12 }}\n          onClick={handleClick}\n        >\n          Search\n        </Button>\n        <Checkbox checked={checked} onChange={handleCheckedChange}></Checkbox>\n        <Typography variant=\"body2\">Include time?</Typography>\n      </Grid>\n    </MuiPickersUtilsProvider>\n  );\n}\n","import { InterestingData, VaccineOrdersArrived } from './types';\n\nexport const initialState = {\n  ordersArrived: 0,\n  vaccinesArrived: 0,\n  vaccinationsUsed: 0,\n  producer: {\n    SolarBuddhica: {\n      orders: 0,\n      vaccines: 0,\n    },\n    Antiqua: {\n      orders: 0,\n      vaccines: 0,\n    },\n    Zerpfy: {\n      orders: 0,\n      vaccines: 0,\n    },\n  },\n  bottlesExpiredOnDay: 0,\n  expiredVaccinesBeforeUsage: 0,\n  vaccinesLeftNotExpired: 0,\n  vaccinesExpiringNextTenDays: 0,\n};\n\nexport enum ActionType {\n  INCREMENT = 'increment',\n  INIT = 'init',\n}\n\ninterface IncrementPayload {\n  order: VaccineOrdersArrived;\n  isBottleExpiredOnGivenDate: boolean;\n  isExpiringInTenDays: boolean;\n  currentProducer: string;\n}\n\ntype Action =\n  | {\n      type: ActionType.INCREMENT;\n      payload: IncrementPayload;\n    }\n  | { type: ActionType.INIT };\n\nexport const interestingDataReducer = (\n  state: InterestingData,\n  action: Action\n): InterestingData => {\n  switch (action.type) {\n    case ActionType.INCREMENT: {\n      return {\n        ...state,\n        ordersArrived: state.ordersArrived + 1,\n        vaccinesArrived:\n          state.vaccinesArrived + action.payload.order.injections,\n        vaccinationsUsed:\n          state.vaccinationsUsed +\n          action.payload.order.vaccinationsDoneWithVaccine.length,\n        expiredVaccinesBeforeUsage: action.payload.order.isBottleExpiredOnDate\n          ? state.expiredVaccinesBeforeUsage +\n            (action.payload.order.injections -\n              action.payload.order.vaccinationsDoneWithVaccine.length)\n          : state.expiredVaccinesBeforeUsage + 0,\n        vaccinesLeftNotExpired: action.payload.order.isBottleExpiredOnDate\n          ? state.vaccinesLeftNotExpired\n          : state.vaccinesLeftNotExpired +\n            (action.payload.order.injections -\n              action.payload.order.vaccinationsDoneWithVaccine.length),\n        bottlesExpiredOnDay: action.payload.isBottleExpiredOnGivenDate\n          ? state.bottlesExpiredOnDay + 1\n          : state.bottlesExpiredOnDay,\n        vaccinesExpiringNextTenDays: action.payload.isExpiringInTenDays\n          ? state.vaccinesExpiringNextTenDays + action.payload.order.injections\n          : state.vaccinesExpiringNextTenDays,\n        producer: {\n          ...state.producer,\n          [action.payload.currentProducer]: {\n            ...state.producer[action.payload.currentProducer],\n            orders: state.producer[action.payload.currentProducer]?.orders + 1,\n            vaccines:\n              state.producer[action.payload.currentProducer]?.vaccines +\n              action.payload.order.injections,\n          },\n        },\n      };\n    }\n    case ActionType.INIT:\n      return initialState;\n    default:\n      throw new Error(`Unhandled action type ${JSON.stringify(action)}`);\n  }\n};\n","import { sub, add, differenceInHours } from 'date-fns';\n\nexport const convertLocalTime = (date: string) => {\n  const inSeconds = Date.parse(date);\n  const tzoffset = new Date().getTimezoneOffset() * 60000;\n  const time = new Date(inSeconds - tzoffset);\n  const today = new Date();\n  if (!isDaylightSavingTime(time) && isDaylightSavingTime(today)) {\n    const timeDST = sub(time, { hours: 1 });\n    return timeDST.toISOString();\n  }\n  if (isDaylightSavingTime(time) && !isDaylightSavingTime(today)) {\n    const timeDST = add(time, { hours: 1 });\n    return timeDST.toISOString();\n  }\n  return time.toISOString();\n};\nexport const removeTimeFromDate = (date: string) => {\n  return date.split('T')[0];\n};\n\nexport const isExpiredInTenDays = (\n  date: number,\n  expirationDate: number\n): boolean => {\n  const differenceInDaysExcludingDST =\n    Math.floor(differenceInHours(expirationDate, date) / 24) | 0;\n  if (differenceInDaysExcludingDST <= 10 && differenceInDaysExcludingDST >= 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isDaylightSavingTime = (date: Date) => {\n  const stdTimezoneOffset = (date: Date) => {\n    const jan = new Date(date.getFullYear(), 0, 1);\n    const jul = new Date(date.getFullYear(), 6, 1);\n    return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n  };\n\n  const isDstObserved = (date: Date) => {\n    return date.getTimezoneOffset() < stdTimezoneOffset(date);\n  };\n\n  if (isDstObserved(date)) {\n    return true;\n  }\n  return false;\n};","import {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  CircularProgress,\n  Box,\n} from '@material-ui/core';\nimport { startOfDay } from 'date-fns';\nimport React from 'react';\nimport { useEffect, useReducer } from 'react';\n\nimport { convertLocalTime, isExpiredInTenDays } from '../utils';\nimport { Vaccine, VaccineOrdersArrivedByDateData } from '../types';\n\nimport { ActionType, initialState, interestingDataReducer } from '../reducer';\n\ninterface Props {\n  dataArrivedByDate?: VaccineOrdersArrivedByDateData;\n  convertedDate: string | null;\n  loadingOrders: boolean;\n  initialLoading: boolean;\n  initialData?: VaccineOrdersArrivedByDateData;\n}\n\nconst SearchResultList = ({\n  dataArrivedByDate,\n  convertedDate,\n  loadingOrders,\n  initialLoading,\n}: Props) => {\n  const [state, dispatch] = useReducer(interestingDataReducer, initialState);\n\n  const parseData = (data: VaccineOrdersArrivedByDateData) => {\n    if (!convertedDate) throw new Error('No given day');\n    const dayStartMS = Date.parse(\n      convertLocalTime(startOfDay(Date.parse(convertedDate)).toISOString())\n    );\n    data.vaccineOrdersArrivedByDate.forEach((order) => {\n      const givenDayMS = Date.parse(convertedDate);\n      const bottleExpiresMS = Date.parse(order.bottleExpires);\n      let isBottleExpiredOnGivenDate = false;\n      if (bottleExpiresMS > dayStartMS && bottleExpiresMS < givenDayMS) {\n        isBottleExpiredOnGivenDate = true;\n      }\n      let isExpiringInTenDays = false;\n      if (isExpiredInTenDays(givenDayMS, bottleExpiresMS)) {\n        isExpiringInTenDays = true;\n      }\n      const currentProducer = stringifyCurrentProducerName(order.vaccine);\n      dispatch({\n        type: ActionType.INCREMENT,\n        payload: {\n          order,\n          currentProducer,\n          isBottleExpiredOnGivenDate,\n          isExpiringInTenDays,\n        },\n      });\n    });\n  };\n\n  useEffect(() => {\n    if (!dataArrivedByDate) return;\n    emptyCachedData();\n    parseData(dataArrivedByDate);\n  }, [dataArrivedByDate]);\n\n  const emptyCachedData = () => {\n    dispatch({ type: ActionType.INIT });\n  };\n\n  const stringifyCurrentProducerName = (vaccine: Vaccine): string => {\n    const currentProducer = vaccine.toString();\n    switch (currentProducer) {\n      case 'SOLAR_BUDDHICA':\n        return 'SolarBuddhica';\n      case 'ANTIQUA':\n        return 'Antiqua';\n      case 'ZERPFY':\n        return 'Zerpfy';\n      default:\n        throw new Error('invalid vaccine producer name');\n    }\n  };\n\n  if (initialLoading && !dataArrivedByDate)\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" style={{ marginTop: 50 }}>\n        <CircularProgress />\n      </Box>\n    );\n\n  if (loadingOrders)\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" style={{ marginTop: 50 }}>\n        <CircularProgress />\n      </Box>\n    );\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Interesting data</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <TableCell>Orders Arrived Total</TableCell>\n            <TableCell>{state.ordersArrived}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Vaccines Arrived Total</TableCell>\n            <TableCell>{state.vaccinesArrived}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Vaccines used</TableCell>\n            <TableCell>{state.vaccinationsUsed}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Bottles expired on given day</TableCell>\n            <TableCell>{state.bottlesExpiredOnDay}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Vaccines expired before usage</TableCell>\n            <TableCell>{state.expiredVaccinesBeforeUsage}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Vaccines left to use</TableCell>\n            <TableCell>{state.vaccinesLeftNotExpired}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Vaccines expiring in the next 10 days</TableCell>\n            <TableCell>{state.vaccinesExpiringNextTenDays}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Orders / Vaccines per producer: SolarBuddhica</TableCell>\n            <TableCell>\n              <strong>Orders</strong> {state.producer.SolarBuddhica.orders}\n              {' / '}\n              <strong>Vaccines</strong> {state.producer.SolarBuddhica.vaccines}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Orders / Vaccines per producer: Antiqua</TableCell>\n            <TableCell>\n              <strong>Orders</strong> {state.producer.Antiqua.orders}\n              {' / '}\n              <strong>Vaccines</strong> {state.producer.Antiqua.vaccines}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Orders / Vaccines per producer: Zerpfy</TableCell>\n            <TableCell>\n              <strong>Orders</strong> {state.producer.Zerpfy.orders}\n              {' / '}\n              <strong>Vaccines</strong> {state.producer.Zerpfy.vaccines}\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default SearchResultList;\n","import React from 'react';\nimport { useQuery, useLazyQuery } from '@apollo/client';\nimport { VACCINE_ORDER_ARRIVED_BY_DATE } from './queries';\nimport {\n  VaccineOrdersArrivedVars,\n  VaccineOrdersArrivedByDateData,\n} from './types';\nimport { AppBar, Container, Toolbar, Typography } from '@material-ui/core';\nimport DateAndTimePicker from './components/DateAndTimePicker';\nimport { convertLocalTime, removeTimeFromDate } from './utils';\nimport SearchResultList from './components/SearchResultList';\n\nfunction App() {\n  const [selectedDate, setSelectedDate] = React.useState<Date | null>(\n    new Date('2021-04-12T11:10:06')\n  );\n  const [convertedDate, setConvertedDate] = React.useState<string | null>(\n    (selectedDate && convertLocalTime(selectedDate.toISOString())) || null\n  );\n  const [isTimeIncludedChecked, setIsTimeIncludedChecked] =\n    React.useState<boolean>(true);\n\n  const [hasSearched, setHasSearched] = React.useState(false);\n\n  const { loading: initialLoading, data: initialVaccineOrderData } = useQuery<\n    VaccineOrdersArrivedByDateData,\n    VaccineOrdersArrivedVars\n  >(VACCINE_ORDER_ARRIVED_BY_DATE, {\n    variables: { date: convertedDate },\n  });\n\n  const [\n    getVaccineOrdersArrivedBy,\n    { loading: loadingOrders, data: vaccineOrdersArrivedByDate },\n  ] = useLazyQuery<VaccineOrdersArrivedByDateData, VaccineOrdersArrivedVars>(\n    VACCINE_ORDER_ARRIVED_BY_DATE,\n    {\n      variables: {\n        date: isTimeIncludedChecked\n          ? convertedDate\n          : (convertedDate && removeTimeFromDate(convertedDate)) || null,\n      },\n    }\n  );\n\n  const handleDateChange = (newDate: Date | null) => {\n    if (!newDate) return null;\n    const dateWithoutTimeZone = convertLocalTime(newDate.toISOString());\n    setConvertedDate(dateWithoutTimeZone);\n    setSelectedDate(newDate);\n  };\n\n  const handleClickSearch = () => {\n    setHasSearched(true);\n    if (isTimeIncludedChecked === false) {\n      const dateWithoutTime =\n        convertedDate && removeTimeFromDate(convertedDate);\n      getVaccineOrdersArrivedBy({\n        variables: {\n          date: dateWithoutTime || null,\n        },\n      });\n      return;\n    }\n    getVaccineOrdersArrivedBy({\n      variables: {\n        date: convertedDate || null,\n      },\n    });\n  };\n  const handleCheckedChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsTimeIncludedChecked(event.target.checked);\n  };\n\n  return (\n    <Container>\n      <AppBar position=\"fixed\">\n        <Toolbar color=\"inherit\">\n          <Typography>Vaccine data</Typography>\n        </Toolbar>\n      </AppBar>\n      <Typography variant=\"h2\" style={{ marginTop: '64px' }} align=\"center\">\n        Search vaccine data\n      </Typography>\n      <DateAndTimePicker\n        selectedDate={selectedDate}\n        handleDateChange={handleDateChange}\n        handleClick={handleClickSearch}\n        handleCheckedChange={handleCheckedChange}\n        checked={isTimeIncludedChecked}\n      />\n      {hasSearched && (\n        <SearchResultList\n          dataArrivedByDate={vaccineOrdersArrivedByDate}\n          convertedDate={convertedDate}\n          loadingOrders={loadingOrders}\n          initialLoading={initialLoading}\n          initialData={initialVaccineOrderData}\n        />\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport { apiBaseUrl } from './constants';\n\nconst client = new ApolloClient({\n  uri: apiBaseUrl,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n","export const apiBaseUrl = '/graphql';\n"],"sourceRoot":""}